name: Tests

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main ]

permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        streamlit-version: [null]
        include:
          # Test with streamlit <1.4.0 and >=1.4.0. See https://github.com/whitphx/streamlit-server-state/issues/64
          - python-version: 3.9
            streamlit-version: 1.0.0
          - python-version: 3.9
            streamlit-version: 1.4.0
          # Test with streamlit >=1.6.0. See https://github.com/whitphx/streamlit-webrtc/issues/709
          - python-version: 3.9
            streamlit-version: 1.6.0
          # Test with streamlit >=1.8.0. See https://github.com/whitphx/streamlit-webrtc/issues/759
          - python-version: 3.9
            streamlit-version: 1.8.0
          # Test with streamlit >=1.12.0. See https://github.com/whitphx/streamlit-server-state/issues/128
          - python-version: 3.9
            streamlit-version: 1.12.0
          # Test with streamlit >=1.12.1. See https://github.com/whitphx/streamlit-server-state/issues/135
          - python-version: 3.9
            streamlit-version: 1.12.1
          # Test with streamlit >=1.14.0. See https://github.com/whitphx/streamlit-server-state/pull/175
          - python-version: 3.9
            streamlit-version: 1.14.0
          # Test with streamlit >=1.18.0. See https://github.com/whitphx/streamlit-server-state/issues/171
          - python-version: 3.9
            streamlit-version: 1.18.0
          # Test with streamlit >=1.38.0. See https://github.com/whitphx/streamlit-server-state/pull/232
          - python-version: 3.9
            streamlit-version: 1.38.0

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        persist-credentials: false

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86 # v5.4.2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Install a specific version of Streamlit
      if: ${{ matrix.streamlit-version }}
      run: |
        uv remove streamlit
        uv add streamlit=="${STREAMLIT_VERSION}"
      env:
        STREAMLIT_VERSION: ${{ matrix.streamlit-version }}

    - name: Show Python and Streamlit versions
      run: |
        python -V
        uv run python -c "import streamlit; print(streamlit.__version__)"

    - name: Run Ruff
      run: |
        uv run ruff check --output-format=github .
        uv run ruff format . --check

    - name: Type checking with mypy
      run: uv run mypy .

    - name: Test with pytest
      run: uv run pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          persist-credentials: false
          fetch-depth: 0  # Fetch all history for hatch-vcs to get the correct version

      - name: Install uv
        uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86 # v5.4.2

      - name: "Set up Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version-file: "pyproject.toml"

      - name: Build the package
        run: uv build

      - name: Upload the built files as an artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: streamlit-server-state-${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || github.sha  }}
          path: dist

  deploy-preview-wheel:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    name: Deploy wheel file to Cloudflare Pages
    outputs:
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - run: mkdir -p ${{ runner.temp }}/artifacts/

      - name: Download all the dists
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: streamlit-server-state-${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || github.sha  }}
          path: ${{ runner.temp }}/artifacts/streamlit-server-state

      - name: Deploy
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: >-
            pages deploy ${{ runner.temp }}/artifacts/streamlit-server-state --project-name=streamlit-server-state-preview --branch=${{ github.head_ref || github.ref_name }} --commit-hash=${{ github.sha }}

      - name: Comment on the PR to inform the deployment file URLs
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';

            // Get all files in the artifacts directory
            const artifactsDir = '${{ runner.temp }}/artifacts/streamlit-server-state';
            const allFiles = fs.readdirSync(artifactsDir);
            // Filter to include only wheel (.whl) and source distribution (.tar.gz) files
            const files = allFiles.filter(file => file.endsWith('.whl') || file.endsWith('.tar.gz'));

            // Create message with links to each file
            let fileLinks = files.map(file => {
              const installCommand = `pip install ${deploymentUrl}/${file}`;
              return `- [${file}](${deploymentUrl}/${file})\n  \`\`\`bash\n  ${installCommand}\n  \`\`\``;
            }).join('\n');

            const message = `📦 Wheel files have been deployed to Cloudflare Pages:

            ${fileLinks}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/streamlit-server-state
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: streamlit-server-state-${{ github.ref_name }}
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: streamlit-server-state-${{ github.ref_name }}
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@f514d46b907ebcd5bedc05145c03b69c1edd8b46 # v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"
